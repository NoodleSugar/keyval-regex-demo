package insomnia.mode;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.bson.Document;

import com.mongodb.MongoClientSettings;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import insomnia.summary.MongoSummaryFactory;
import insomnia.summary.Summary;

public class ModeSumMongo implements IMode
{
	private Options options;
	private String[] args;
	private CommandLine cmdLine;

	public ModeSumMongo()
	{
		options = new Options();
		options.addOption("h", "help", false, "print the help");
		options.addOption("a", "address", true, "specify the host address");
		options.addOption("p", "port", true, "specify the host port");
		options.addOption("d", "destination", true, "specify the desination file");
		options.addOption("u", "user", true, "specify the username");
		options.addOption("P", "password", true, "specify the password");
	}

	private void parseCmdLine()
	{
		CommandLineParser parser = new DefaultParser();
		try
		{
			cmdLine = parser.parse(options, args);
		}
		catch(ParseException e)
		{
			e.printStackTrace();
		}
	}

	private void printHelp()
	{
		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("Querex msummarise <database> <collection> [<options1>...]", options);
	}

	private boolean checkArgs()
	{
		if(args.length < 3)
		{
			if(args.length == 2 && cmdLine.hasOption("h"))
				printHelp();
			else
				System.out.println(
						"Invalid args\nUsage: Querex msummarise <database> <collection> [<option1> <option2>...]");
			return false;
		}
		return true;
	}

	private void saveSummary()
	{
		String address = "localhost";
		int port = 27017;
		String dbName = args[1];
		String collectionName = args[2];
		String dest = "summary.sum";
		String username = "";
		String password = "";

		String tmp;
		if((tmp = cmdLine.getOptionValue("a")) != null)
			address = tmp;
		if((tmp = cmdLine.getOptionValue("p")) != null)
			port = Integer.parseInt(tmp);
		if((tmp = cmdLine.getOptionValue("d")) != null)
			dest = tmp;
		if((tmp = cmdLine.getOptionValue("u")) != null)
			username = tmp;
		if((tmp = cmdLine.getOptionValue("P")) != null)
			password = tmp;

		MongoClient mongo;
		@SuppressWarnings("unused")
		MongoCredential credential;
		MongoDatabase database;

		//MongoDB connection
		final String faddress = address;
		final int fport = port;
		mongo = MongoClients.create(MongoClientSettings.builder()
				.applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(faddress, fport))))
				.build());
		credential = MongoCredential.createCredential(username, dbName, password.toCharArray());
		database = mongo.getDatabase(dbName);
		MongoCollection<Document> collection = database.getCollection(collectionName);

		//Summary generated by Factory
		MongoSummaryFactory factory = MongoSummaryFactory.getInstance();
		Summary mongoSummary = factory.generate(collection.find());
		
		
		BufferedOutputStream out;
		try
		{
			out = new BufferedOutputStream(new FileOutputStream("summary/" + dest));
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
			return;
		}
		//Summary saved by Factory
		factory.save(out, mongoSummary);
		try
		{
			out.close();
		}
		catch(IOException e)
		{
			e.printStackTrace();
			return;
		}
	}

	@Override
	public void run(String[] args)
	{
		this.args = args;
		parseCmdLine();
		if(!checkArgs())
			return;

		saveSummary();
	}
}
